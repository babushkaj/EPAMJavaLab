{"ast":null,"code":"var _jsxFileName = \"C:\\\\git\\\\laboratory\\\\news-front\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { I18nextProvider } from 'react-i18next';\nimport i18next from 'i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport translation_EN from './locales/en/translation.json';\nimport translation_RU from './locales/ru/translation.json';\nconst options = {\n  // order and from where user language should be detected\n  order: ['cookie', 'navigator', 'htmlTag', 'path', 'subdomain'],\n  // keys or params to lookup language from\n  lookupQuerystring: 'lng',\n  lookupCookie: 'i18next',\n  lookupLocalStorage: 'i18nextLng',\n  lookupFromPathIndex: 0,\n  lookupFromSubdomainIndex: 0,\n  // cache user language on\n  caches: ['localStorage', 'cookie'],\n  excludeCacheFor: ['cimode'],\n  // languages to not persist (cookie, localStorage)\n  // optional expire and domain for set cookie\n  cookieMinutes: 10,\n  cookieDomain: 'myDomain',\n  // optional htmlTag with lang attribute, the default is:\n  htmlTag: document.documentElement,\n  // only detect languages that are in the whitelist\n  checkWhitelist: true\n};\ni18next.use(LanguageDetector).init({\n  interpolation: {\n    escapeValue: false\n  },\n  detection: options,\n  resources: {\n    en: {\n      translation: translation_EN\n    },\n    ru: {\n      translation: translation_RU\n    }\n  }\n}); // ========================================\n\nReactDOM.render(React.createElement(I18nextProvider, {\n  i18n: i18next,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 57\n  },\n  __self: this\n}, React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 58\n  },\n  __self: this\n})), document.getElementById('root'));","map":{"version":3,"sources":["C:/git/laboratory/news-front/src/index.js"],"names":["React","ReactDOM","App","I18nextProvider","i18next","LanguageDetector","translation_EN","translation_RU","options","order","lookupQuerystring","lookupCookie","lookupLocalStorage","lookupFromPathIndex","lookupFromSubdomainIndex","caches","excludeCacheFor","cookieMinutes","cookieDomain","htmlTag","document","documentElement","checkWhitelist","use","init","interpolation","escapeValue","detection","resources","en","translation","ru","render","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAOC,GAAP,MAAgB,OAAhB;AAEA,SAAQC,eAAR,QAA8B,eAA9B;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AAEA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AAEA,MAAMC,OAAO,GAAG;AACf;AACAC,EAAAA,KAAK,EAAE,CAAE,QAAF,EAAY,WAAZ,EAAyB,SAAzB,EAAoC,MAApC,EAA4C,WAA5C,CAFQ;AAIf;AACAC,EAAAA,iBAAiB,EAAE,KALJ;AAMfC,EAAAA,YAAY,EAAE,SANC;AAOfC,EAAAA,kBAAkB,EAAE,YAPL;AAQfC,EAAAA,mBAAmB,EAAE,CARN;AASfC,EAAAA,wBAAwB,EAAE,CATX;AAWf;AACAC,EAAAA,MAAM,EAAE,CAAC,cAAD,EAAiB,QAAjB,CAZO;AAafC,EAAAA,eAAe,EAAE,CAAC,QAAD,CAbF;AAac;AAE7B;AACAC,EAAAA,aAAa,EAAE,EAhBA;AAiBfC,EAAAA,YAAY,EAAE,UAjBC;AAmBf;AACAC,EAAAA,OAAO,EAAEC,QAAQ,CAACC,eApBH;AAsBf;AACAC,EAAAA,cAAc,EAAE;AAvBD,CAAhB;AA0BAlB,OAAO,CACLmB,GADF,CACMlB,gBADN,EAEEmB,IAFF,CAEO;AACNC,EAAAA,aAAa,EAAE;AAAEC,IAAAA,WAAW,EAAE;AAAf,GADT;AAENC,EAAAA,SAAS,EAAEnB,OAFL;AAGNoB,EAAAA,SAAS,EAAE;AACVC,IAAAA,EAAE,EAAE;AACHC,MAAAA,WAAW,EAAExB;AADV,KADM;AAIVyB,IAAAA,EAAE,EAAE;AACHD,MAAAA,WAAW,EAAEvB;AADV;AAJM;AAHL,CAFP,E,CAeA;;AAEAN,QAAQ,CAAC+B,MAAT,CACC,oBAAC,eAAD;AAAiB,EAAA,IAAI,EAAE5B,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACC,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADD,CADD,EAIIgB,QAAQ,CAACa,cAAT,CAAwB,MAAxB,CAJJ","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nimport {I18nextProvider} from 'react-i18next';\r\nimport i18next from 'i18next';\r\nimport LanguageDetector from 'i18next-browser-languagedetector';\r\n\r\nimport translation_EN from './locales/en/translation.json';\r\nimport translation_RU from './locales/ru/translation.json';\r\n\r\nconst options = {\r\n\t// order and from where user language should be detected\r\n\torder: [ 'cookie', 'navigator', 'htmlTag', 'path', 'subdomain'],\r\n  \r\n\t// keys or params to lookup language from\r\n\tlookupQuerystring: 'lng',\r\n\tlookupCookie: 'i18next',\r\n\tlookupLocalStorage: 'i18nextLng',\r\n\tlookupFromPathIndex: 0,\r\n\tlookupFromSubdomainIndex: 0,\r\n  \r\n\t// cache user language on\r\n\tcaches: ['localStorage', 'cookie'],\r\n\texcludeCacheFor: ['cimode'], // languages to not persist (cookie, localStorage)\r\n  \r\n\t// optional expire and domain for set cookie\r\n\tcookieMinutes: 10,\r\n\tcookieDomain: 'myDomain',\r\n  \r\n\t// optional htmlTag with lang attribute, the default is:\r\n\thtmlTag: document.documentElement,\r\n  \r\n\t// only detect languages that are in the whitelist\r\n\tcheckWhitelist: true\r\n  }\r\n\r\ni18next\r\n\t.use(LanguageDetector)\r\n\t.init({\r\n\tinterpolation: { escapeValue: false },   \r\n\tdetection: options,                          \r\n\tresources: {\r\n\t\ten: {\r\n\t\t\ttranslation: translation_EN              \r\n\t\t},\r\n\t\tru: {\r\n\t\t\ttranslation: translation_RU\r\n\t\t},\r\n\t},\r\n});\r\n\r\n// ========================================\r\n\r\nReactDOM.render(\r\n\t<I18nextProvider i18n={i18next}>\r\n\t\t<App/>\r\n\t</I18nextProvider>,\r\n    document.getElementById('root')\r\n);\r\n"]},"metadata":{},"sourceType":"module"}