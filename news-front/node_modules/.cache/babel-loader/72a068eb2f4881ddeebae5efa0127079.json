{"ast":null,"code":"var _jsxFileName = \"C:\\\\git\\\\laboratory\\\\news-front\\\\src\\\\component\\\\TagsList.jsx\";\nimport React from 'react';\nimport TagDataService from './TagDataService';\n\nclass TagsList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tags: []\n    };\n  }\n\n  componentDidMount() {\n    this.refreshTags();\n  }\n\n  refreshTags() {\n    TagDataService.getAllTags().then(response => {\n      this.setState({\n        tags: response.data\n      });\n    });\n  }\n\n  createTag() {\n    this.cleanErrorMessage(\"tagNameErrorMessage\");\n    let newTagInput = document.getElementById(\"newTagField\");\n    let errorMessage = this.validateNewsTagValue(newTagInput.value);\n\n    if (errorMessage) {\n      let small = document.createElement('small');\n      small.id = \"tagNameErrorMessage\";\n      small.className = \"text-danger\";\n      small.innerText = errorMessage;\n      let fieldSet = document.getElementById(\"newTagInputGroup\");\n      fieldSet.after(small);\n      return;\n    }\n\n    let newTagName = document.getElementById(\"newTagField\").value;\n    let newTag = {\n      id: null,\n      name: newTagName\n    };\n    TagDataService.createTag(newTag).then(response => {\n      document.getElementById(\"newTagField\").value = \"\";\n      this.refreshTags();\n    });\n  }\n\n  saveChangedTag(tagId) {\n    let tagName = document.getElementById(\"tagNameField\" + tagId).value;\n    let tag = {\n      id: tagId,\n      name: tagName\n    };\n    TagDataService.editTag(tag).then(response => {\n      this.refreshTags();\n    });\n  }\n\n  deleteTag(id) {\n    TagDataService.deleteTag(id).then(response => {\n      this.refreshTags();\n    });\n  }\n\n  cleanErrorMessage(errorFieldId) {\n    let previousErrorMessage = document.getElementById(errorFieldId);\n\n    if (previousErrorMessage) {\n      previousErrorMessage.remove();\n    }\n  }\n\n  validateNewsTagValue(value) {\n    let errorMessage = \"\";\n\n    if (!value) {\n      errorMessage = \"tag_name_mustnt_be_empty\";\n    } else if (value.length > 30) {\n      errorMessage = \"tag_name_mustnt_be_larger_than_30_characters\";\n    } else {\n      const allTags = this.state.tags;\n\n      for (let tag of allTags) {\n        if (tag.name === value) {\n          errorMessage = this.props.t(\"tag_already_exists\");\n          break;\n        }\n      }\n    }\n\n    return errorMessage;\n  }\n\n  render() {\n    const renderTagsList = this.state.tags.map(tag => {\n      return React.createElement(\"div\", {\n        className: \"row my-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"col-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"tagNameField\" + tag.id,\n        className: \"form-control\",\n        type: \"text\",\n        defaultValue: tag.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-outline-primary btn-block mx-1\",\n        onClick: () => this.saveChangedTag(tag.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, this.props.t(\"save\"))), React.createElement(\"div\", {\n        className: \"col-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-outline-danger btn-block mx-1\",\n        onClick: () => this.deleteTag(tag.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, this.props.t(\"delete\"))), React.createElement(\"div\", {\n        className: \"col-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }));\n    });\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"col-10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"newTagInputGroup\",\n      className: \"input-group mb-3 w-100 my-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"newTagField\",\n      type: \"text\",\n      className: \"form-control\",\n      placeholder: this.props.t(\"new_tag_name\"),\n      \"aria-describedby\": \"button-addon2\",\n      onFocus: () => this.cleanErrorMessage(\"tagNameErrorMessage\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"input-group-append\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-outline-success btn-sm\",\n      type: \"button\",\n      id: \"add-tags-button\",\n      onClick: () => this.createTag(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, this.props.t(\"add\")))), renderTagsList), React.createElement(\"div\", {\n      className: \"col-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default TagsList;","map":{"version":3,"sources":["C:/git/laboratory/news-front/src/component/TagsList.jsx"],"names":["React","TagDataService","TagsList","Component","constructor","props","state","tags","componentDidMount","refreshTags","getAllTags","then","response","setState","data","createTag","cleanErrorMessage","newTagInput","document","getElementById","errorMessage","validateNewsTagValue","value","small","createElement","id","className","innerText","fieldSet","after","newTagName","newTag","name","saveChangedTag","tagId","tagName","tag","editTag","deleteTag","errorFieldId","previousErrorMessage","remove","length","allTags","t","render","renderTagsList","map"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,MAAMC,QAAN,SAAuBF,KAAK,CAACG,SAA7B,CAAsC;AAElCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAC;AADI,KAAb;AAGH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,WAAL;AACH;;AAEDA,EAAAA,WAAW,GAAE;AACTR,IAAAA,cAAc,CAACS,UAAf,GACCC,IADD,CAEIC,QAAQ,IAAI;AACR,WAAKC,QAAL,CAAc;AAACN,QAAAA,IAAI,EAAEK,QAAQ,CAACE;AAAhB,OAAd;AACH,KAJL;AAMH;;AAEDC,EAAAA,SAAS,GAAE;AACP,SAAKC,iBAAL,CAAuB,qBAAvB;AAEA,QAAIC,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,CAAlB;AACA,QAAIC,YAAY,GAAG,KAAKC,oBAAL,CAA0BJ,WAAW,CAACK,KAAtC,CAAnB;;AACA,QAAIF,YAAJ,EAAkB;AACd,UAAIG,KAAK,GAAGL,QAAQ,CAACM,aAAT,CAAuB,OAAvB,CAAZ;AACAD,MAAAA,KAAK,CAACE,EAAN,GAAW,qBAAX;AACAF,MAAAA,KAAK,CAACG,SAAN,GAAkB,aAAlB;AACAH,MAAAA,KAAK,CAACI,SAAN,GAAkBP,YAAlB;AACA,UAAIQ,QAAQ,GAAGV,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,CAAf;AACAS,MAAAA,QAAQ,CAACC,KAAT,CAAeN,KAAf;AACA;AACH;;AAED,QAAIO,UAAU,GAAGZ,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCG,KAAxD;AACA,QAAIS,MAAM,GAAE;AAACN,MAAAA,EAAE,EAAE,IAAL;AAAWO,MAAAA,IAAI,EAAEF;AAAjB,KAAZ;AACA7B,IAAAA,cAAc,CAACc,SAAf,CAAyBgB,MAAzB,EACCpB,IADD,CAEIC,QAAQ,IAAI;AACRM,MAAAA,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCG,KAAvC,GAA+C,EAA/C;AACA,WAAKb,WAAL;AACH,KALL;AAOH;;AAEDwB,EAAAA,cAAc,CAACC,KAAD,EAAO;AACjB,QAAIC,OAAO,GAAGjB,QAAQ,CAACC,cAAT,CAAwB,iBAAiBe,KAAzC,EAAgDZ,KAA9D;AACA,QAAIc,GAAG,GAAG;AAACX,MAAAA,EAAE,EAAES,KAAL;AAAYF,MAAAA,IAAI,EAAEG;AAAlB,KAAV;AACAlC,IAAAA,cAAc,CAACoC,OAAf,CAAuBD,GAAvB,EACCzB,IADD,CAEIC,QAAQ,IAAI;AACR,WAAKH,WAAL;AACH,KAJL;AAMH;;AAED6B,EAAAA,SAAS,CAACb,EAAD,EAAI;AACTxB,IAAAA,cAAc,CAACqC,SAAf,CAAyBb,EAAzB,EACCd,IADD,CAEIC,QAAQ,IAAI;AACR,WAAKH,WAAL;AACH,KAJL;AAMH;;AAEDO,EAAAA,iBAAiB,CAACuB,YAAD,EAAc;AAC3B,QAAIC,oBAAoB,GAAGtB,QAAQ,CAACC,cAAT,CAAwBoB,YAAxB,CAA3B;;AACA,QAAIC,oBAAJ,EAA0B;AACtBA,MAAAA,oBAAoB,CAACC,MAArB;AACH;AACJ;;AAEDpB,EAAAA,oBAAoB,CAACC,KAAD,EAAQ;AACxB,QAAIF,YAAY,GAAG,EAAnB;;AACA,QAAI,CAACE,KAAL,EAAY;AACRF,MAAAA,YAAY,GAAG,0BAAf;AACH,KAFD,MAEO,IAAIE,KAAK,CAACoB,MAAN,GAAe,EAAnB,EAAuB;AAC1BtB,MAAAA,YAAY,GAAG,8CAAf;AACH,KAFM,MAEA;AACH,YAAMuB,OAAO,GAAG,KAAKrC,KAAL,CAAWC,IAA3B;;AACA,WAAK,IAAI6B,GAAT,IAAgBO,OAAhB,EAAyB;AACrB,YAAIP,GAAG,CAACJ,IAAJ,KAAaV,KAAjB,EAAwB;AACpBF,UAAAA,YAAY,GAAG,KAAKf,KAAL,CAAWuC,CAAX,CAAa,oBAAb,CAAf;AACA;AACH;AACJ;AACJ;;AACD,WAAOxB,YAAP;AACH;;AAEDyB,EAAAA,MAAM,GAAE;AACJ,UAAMC,cAAc,GAAG,KAAKxC,KAAL,CAAWC,IAAX,CAAgBwC,GAAhB,CAAoBX,GAAG,IAAI;AAC9C,aACI;AAAK,QAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,EAAE,EAAE,iBAAiBA,GAAG,CAACX,EAAhC;AAAoC,QAAA,SAAS,EAAC,cAA9C;AAA8D,QAAA,IAAI,EAAC,MAAnE;AAA0E,QAAA,YAAY,EAAEW,GAAG,CAACJ,IAA5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAFJ,EAKI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,wCAAhC;AAAyE,QAAA,OAAO,EAAE,MAAM,KAAKC,cAAL,CAAoBG,GAAG,CAACX,EAAxB,CAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAsH,KAAKpB,KAAL,CAAWuC,CAAX,CAAa,MAAb,CAAtH,CADJ,CALJ,EAQI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,uCAAhC;AAAwE,QAAA,OAAO,EAAE,MAAM,KAAKN,SAAL,CAAeF,GAAG,CAACX,EAAnB,CAAvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgH,KAAKpB,KAAL,CAAWuC,CAAX,CAAa,QAAb,CAAhH,CADJ,CARJ,EAWI;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAXJ,CADJ;AAeH,KAhBsB,CAAvB;AAkBA,WACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAK,MAAA,EAAE,EAAC,kBAAR;AAA2B,MAAA,SAAS,EAAC,6BAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAO,MAAA,EAAE,EAAC,aAAV;AAAwB,MAAA,IAAI,EAAC,MAA7B;AAAoC,MAAA,SAAS,EAAC,cAA9C;AAA6D,MAAA,WAAW,EAAE,KAAKvC,KAAL,CAAWuC,CAAX,CAAa,cAAb,CAA1E;AAAwG,0BAAiB,eAAzH;AAAyI,MAAA,OAAO,EAAE,MAAM,KAAK5B,iBAAL,CAAuB,qBAAvB,CAAxJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAQ,MAAA,SAAS,EAAC,gCAAlB;AAAmD,MAAA,IAAI,EAAC,QAAxD;AAAiE,MAAA,EAAE,EAAC,iBAApE;AAAsF,MAAA,OAAO,EAAE,MAAM,KAAKD,SAAL,EAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwH,KAAKV,KAAL,CAAWuC,CAAX,CAAa,KAAb,CAAxH,CADJ,CAFJ,CADA,EAQCE,cARD,CAFJ,EAaI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbJ,CADJ,CADJ;AAoBH;;AApIiC;;AAuItC,eAAe5C,QAAf","sourcesContent":["import React from 'react'\r\n\r\nimport TagDataService from './TagDataService'\r\n\r\nclass TagsList extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            tags:[],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshTags();\r\n    }\r\n\r\n    refreshTags(){\r\n        TagDataService.getAllTags()\r\n        .then(\r\n            response => {\r\n                this.setState({tags: response.data});\r\n            }\r\n        )\r\n    }\r\n\r\n    createTag(){\r\n        this.cleanErrorMessage(\"tagNameErrorMessage\");\r\n        \r\n        let newTagInput = document.getElementById(\"newTagField\");\r\n        let errorMessage = this.validateNewsTagValue(newTagInput.value);\r\n        if (errorMessage) {\r\n            let small = document.createElement('small');\r\n            small.id = \"tagNameErrorMessage\";\r\n            small.className = \"text-danger\";\r\n            small.innerText = errorMessage;\r\n            let fieldSet = document.getElementById(\"newTagInputGroup\");\r\n            fieldSet.after(small);\r\n            return;\r\n        }\r\n\r\n        let newTagName = document.getElementById(\"newTagField\").value;\r\n        let newTag ={id: null, name: newTagName}; \r\n        TagDataService.createTag(newTag)\r\n        .then(\r\n            response => {\r\n                document.getElementById(\"newTagField\").value = \"\";\r\n                this.refreshTags();\r\n            }\r\n        )\r\n    }\r\n\r\n    saveChangedTag(tagId){\r\n        let tagName = document.getElementById(\"tagNameField\" + tagId).value;\r\n        let tag = {id: tagId, name: tagName};\r\n        TagDataService.editTag(tag)\r\n        .then(\r\n            response => {\r\n                this.refreshTags();\r\n            }\r\n        )\r\n    }\r\n\r\n    deleteTag(id){\r\n        TagDataService.deleteTag(id)\r\n        .then(\r\n            response => {\r\n                this.refreshTags();\r\n            }\r\n        )\r\n    }\r\n\r\n    cleanErrorMessage(errorFieldId){\r\n        let previousErrorMessage = document.getElementById(errorFieldId);\r\n        if (previousErrorMessage) {\r\n            previousErrorMessage.remove();\r\n        }\r\n    }\r\n\r\n    validateNewsTagValue(value) {\r\n        let errorMessage = \"\";\r\n        if (!value) {\r\n            errorMessage = \"tag_name_mustnt_be_empty\";\r\n        } else if (value.length > 30) {\r\n            errorMessage = \"tag_name_mustnt_be_larger_than_30_characters\";\r\n        } else {\r\n            const allTags = this.state.tags;\r\n            for (let tag of allTags) {\r\n                if (tag.name === value) {\r\n                    errorMessage = this.props.t(\"tag_already_exists\");\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return errorMessage;\r\n    }\r\n\r\n    render(){\r\n        const renderTagsList = this.state.tags.map(tag => {\r\n            return(\r\n                <div className=\"row my-1\">\r\n                    <div className=\"col-1\"></div>\r\n                    <div className=\"col-6\">\r\n                        <input id={\"tagNameField\" + tag.id} className=\"form-control\"  type=\"text\" defaultValue={tag.name}/>\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        <button type=\"button\" className=\"btn btn-outline-primary btn-block mx-1\" onClick={() => this.saveChangedTag(tag.id)}>{this.props.t(\"save\")}</button>\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        <button type=\"button\" className=\"btn btn-outline-danger btn-block mx-1\" onClick={() => this.deleteTag(tag.id)}>{this.props.t(\"delete\")}</button>\r\n                    </div>\r\n                    <div className=\"col-1\"></div>\r\n                </div>\r\n            )\r\n        })  \r\n\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-1\"></div>\r\n                    <div className=\"col-10\">\r\n                    <div id=\"newTagInputGroup\" className=\"input-group mb-3 w-100 my-3\">\r\n                        <input id=\"newTagField\" type=\"text\" className=\"form-control\" placeholder={this.props.t(\"new_tag_name\")} aria-describedby=\"button-addon2\" onFocus={() => this.cleanErrorMessage(\"tagNameErrorMessage\")}/>\r\n                        <div className=\"input-group-append\">\r\n                            <button className=\"btn btn-outline-success btn-sm\" type=\"button\" id=\"add-tags-button\" onClick={() => this.createTag()}>{this.props.t(\"add\")}</button>\r\n                        </div>\r\n                    </div>\r\n \r\n                    {renderTagsList}\r\n\r\n                    </div>\r\n                    <div className=\"col-1\"></div>\r\n                </div>\r\n     \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TagsList\r\n"]},"metadata":{},"sourceType":"module"}