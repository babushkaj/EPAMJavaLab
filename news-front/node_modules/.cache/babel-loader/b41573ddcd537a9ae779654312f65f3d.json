{"ast":null,"code":"var _jsxFileName = \"C:\\\\git\\\\laboratory\\\\news-front\\\\src\\\\component\\\\AuthorsList.jsx\";\nimport React from 'react';\nimport AuthorDataService from './AuthorDataService';\n\nclass AuthorsList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      authors: []\n    };\n  }\n\n  componentDidMount() {\n    this.refreshAuthors();\n  }\n\n  refreshAuthors() {\n    AuthorDataService.getAllAuthors().then(response => {\n      this.setState({\n        authors: response.data\n      });\n    });\n  }\n\n  createAuthor() {\n    this.cleanErrorMessage(\"authorNameErrorMessage\");\n    this.cleanErrorMessage(\"authorSurnameErrorMessage\");\n    let newAuthorName = document.getElementById(\"newAuthorNameField\").value;\n    let newAuthorSurname = document.getElementById(\"newAuthorSurnameField\").value;\n    let errorMessage1 = this.validateAuthorName(newAuthorName);\n    let errorMessage2 = this.validateAuthorName(newAuthorSurname);\n\n    if (errorMessage1) {\n      let small = document.createElement('small');\n      small.id = \"authorNameErrorMessage\";\n      small.className = \"text-danger\";\n      small.innerText = errorMessage1;\n      let fieldSet = document.getElementById(\"newAuthorInputGroup\");\n      fieldSet.after(small);\n      return;\n    }\n\n    if (errorMessage2) {\n      let small = document.createElement('small');\n      small.id = \"authorSurnameErrorMessage\";\n      small.className = \"text-danger\";\n      small.innerText = errorMessage2;\n      let fieldSet = document.getElementById(\"newAuthorInputGroup\");\n      fieldSet.after(small);\n      return;\n    }\n\n    let newAuthor = {\n      id: null,\n      name: newAuthorName,\n      surname: newAuthorSurname\n    };\n    AuthorDataService.createAuthor(newAuthor).then(response => {\n      document.getElementById(\"newAuthorNameField\").value = \"\";\n      document.getElementById(\"newAuthorSurnameField\").value = \"\";\n      this.refreshAuthors();\n    });\n  }\n\n  saveChangedAuthor(authorId) {\n    let authorName = document.getElementById(\"authorNameField\" + authorId).value;\n    let authorSurname = document.getElementById(\"authorSurnameField\" + authorId).value;\n    let author = {\n      id: authorId,\n      name: authorName,\n      surname: authorSurname\n    };\n    AuthorDataService.editAuthor(author).then(response => {\n      this.refreshAuthors();\n    });\n  }\n\n  deleteAuthor(id) {\n    AuthorDataService.deleteAuthor(id).then(response => {\n      this.refreshAuthors();\n    });\n  }\n\n  cleanErrorMessage(errorFieldId) {\n    let previousErrorMessage = document.getElementById(errorFieldId);\n\n    if (previousErrorMessage) {\n      previousErrorMessage.remove();\n    }\n  }\n\n  validateAuthorName(value) {\n    let errorMessage = \"\";\n\n    if (!value) {\n      errorMessage = this.props.t(\"author_name_surname_mustnt_be_empty\");\n    } else if (value.length > 30) {\n      errorMessage = this.props.t(\"author_name_surname_mustnt_be_larger_than_30_characters\");\n    }\n\n    return errorMessage;\n  }\n\n  createErrorField(fieldId, errorMessage, afterElementId) {\n    let small = document.createElement('small');\n    small.id = fieldId;\n    small.className = \"text-danger\";\n    small.innerText = errorMessage;\n    let fieldSet = document.getElementById(afterElementId);\n    fieldSet.after(small);\n  }\n\n  nameSurnameErrorRender() {\n    let errorsExist = 0;\n    this.cleanErrorMessage(\"authorNameErrorMessage\");\n    this.cleanErrorMessage(\"authorSurnameErrorMessage\");\n    let newAuthorName = document.getElementById(\"newAuthorNameField\").value;\n    let newAuthorSurname = document.getElementById(\"newAuthorSurnameField\").value;\n    let errorMessage1 = this.validateAuthorName(newAuthorName);\n    let errorMessage2 = this.validateAuthorName(newAuthorSurname);\n\n    if (errorMessage1) {\n      this.createErrorField(\"authorNameErrorMessage\", errorMessage1, \"newAuthorInputGroup\");\n      errorsExist++;\n    }\n\n    if (errorMessage2) {\n      this.createErrorField(\"authorSurnameErrorMessage\", errorMessage, \"newAuthorInputGroup\");\n      errorsExist++;\n    }\n\n    return errorsExist;\n  }\n\n  render() {\n    const renderAuthorsList = this.state.authors.map(author => {\n      return React.createElement(\"div\", {\n        className: \"row my-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"col-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"authorNameField\" + author.id,\n        className: \"form-control\",\n        type: \"text\",\n        defaultValue: author.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"authorSurnameField\" + author.id,\n        className: \"form-control\",\n        type: \"text\",\n        defaultValue: author.surname,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-outline-primary btn-block mx-1\",\n        onClick: () => this.saveChangedAuthor(author.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, this.props.t(\"save\"))), React.createElement(\"div\", {\n        className: \"col-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-outline-danger btn-block mx-1\",\n        onClick: () => this.deleteAuthor(author.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, this.props.t(\"delete\"))), React.createElement(\"div\", {\n        className: \"col-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }));\n    });\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"col-10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"newAuthorInputGroup\",\n      className: \"input-group mb-3 w-100 my-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"newAuthorNameField\",\n      type: \"text\",\n      className: \"form-control\",\n      placeholder: this.props.t(\"new_author_name\"),\n      \"aria-describedby\": \"button-addon2\",\n      onFocus: () => this.cleanErrorMessage(\"authorNameErrorMessage\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      id: \"newAuthorSurnameField\",\n      type: \"text\",\n      className: \"form-control\",\n      placeholder: this.props.t(\"new_author_surname\"),\n      \"aria-describedby\": \"button-addon2\",\n      onFocus: () => this.cleanErrorMessage(\"authorSurnameErrorMessage\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"input-group-append\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-outline-success btn-sm\",\n      type: \"button\",\n      id: \"add-tags-button\",\n      onClick: () => this.createAuthor(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, this.props.t(\"add\")))), renderAuthorsList), React.createElement(\"div\", {\n      className: \"col-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default AuthorsList;","map":{"version":3,"sources":["C:/git/laboratory/news-front/src/component/AuthorsList.jsx"],"names":["React","AuthorDataService","AuthorsList","Component","constructor","props","state","authors","componentDidMount","refreshAuthors","getAllAuthors","then","response","setState","data","createAuthor","cleanErrorMessage","newAuthorName","document","getElementById","value","newAuthorSurname","errorMessage1","validateAuthorName","errorMessage2","small","createElement","id","className","innerText","fieldSet","after","newAuthor","name","surname","saveChangedAuthor","authorId","authorName","authorSurname","author","editAuthor","deleteAuthor","errorFieldId","previousErrorMessage","remove","errorMessage","t","length","createErrorField","fieldId","afterElementId","nameSurnameErrorRender","errorsExist","render","renderAuthorsList","map"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\nimport AuthorDataService from './AuthorDataService'\r\n\r\nclass AuthorsList extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            authors:[],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshAuthors();\r\n    }\r\n\r\n    refreshAuthors(){\r\n        AuthorDataService.getAllAuthors()\r\n        .then(\r\n            response => {\r\n                this.setState({authors: response.data});\r\n            }\r\n        )\r\n    }\r\n\r\n    createAuthor(){\r\n        this.cleanErrorMessage(\"authorNameErrorMessage\");\r\n        this.cleanErrorMessage(\"authorSurnameErrorMessage\");\r\n        let newAuthorName = document.getElementById(\"newAuthorNameField\").value;\r\n        let newAuthorSurname = document.getElementById(\"newAuthorSurnameField\").value;\r\n        \r\n        let errorMessage1 = this.validateAuthorName(newAuthorName);\r\n        let errorMessage2 = this.validateAuthorName(newAuthorSurname);\r\n\r\n        if (errorMessage1) {\r\n            let small = document.createElement('small');\r\n            small.id = \"authorNameErrorMessage\";\r\n            small.className = \"text-danger\";\r\n            small.innerText = errorMessage1;\r\n            let fieldSet = document.getElementById(\"newAuthorInputGroup\");\r\n            fieldSet.after(small);\r\n            return;\r\n        }\r\n\r\n        if (errorMessage2) {\r\n            let small = document.createElement('small');\r\n            small.id = \"authorSurnameErrorMessage\";\r\n            small.className = \"text-danger\";\r\n            small.innerText = errorMessage2;\r\n            let fieldSet = document.getElementById(\"newAuthorInputGroup\");\r\n            fieldSet.after(small);\r\n            return;\r\n        }\r\n\r\n        let newAuthor ={id: null, name: newAuthorName, surname: newAuthorSurname}; \r\n\r\n        AuthorDataService.createAuthor(newAuthor)\r\n        .then(\r\n            response => {\r\n                document.getElementById(\"newAuthorNameField\").value = \"\";\r\n                document.getElementById(\"newAuthorSurnameField\").value = \"\";\r\n                this.refreshAuthors();\r\n            }\r\n        )\r\n    }\r\n\r\n    saveChangedAuthor(authorId){\r\n        let authorName = document.getElementById(\"authorNameField\" + authorId).value;\r\n        let authorSurname = document.getElementById(\"authorSurnameField\" + authorId).value;\r\n        let author ={id: authorId, name: authorName, surname: authorSurname}; \r\n        AuthorDataService.editAuthor(author)\r\n        .then(\r\n            response => {\r\n                this.refreshAuthors();\r\n            }\r\n        )\r\n    }\r\n\r\n    deleteAuthor(id){\r\n        AuthorDataService.deleteAuthor(id)\r\n        .then(\r\n            response => {\r\n                this.refreshAuthors();\r\n            }\r\n        )\r\n    }\r\n\r\n    cleanErrorMessage(errorFieldId){\r\n        let previousErrorMessage = document.getElementById(errorFieldId);\r\n        if (previousErrorMessage) {\r\n            previousErrorMessage.remove();\r\n        }\r\n    }\r\n\r\n    validateAuthorName(value) {\r\n        let errorMessage = \"\";\r\n        if (!value) {\r\n            errorMessage = this.props.t(\"author_name_surname_mustnt_be_empty\");\r\n        } else if (value.length > 30) {\r\n            errorMessage = this.props.t(\"author_name_surname_mustnt_be_larger_than_30_characters\");\r\n        } \r\n        return errorMessage;\r\n    }\r\n\r\n    createErrorField(fieldId, errorMessage, afterElementId) {\r\n        let small = document.createElement('small');\r\n        small.id = fieldId;\r\n        small.className = \"text-danger\";\r\n        small.innerText = errorMessage;\r\n        let fieldSet = document.getElementById(afterElementId);\r\n        fieldSet.after(small);\r\n    }\r\n\r\n    nameSurnameErrorRender(){\r\n        let errorsExist = 0;\r\n\r\n        this.cleanErrorMessage(\"authorNameErrorMessage\");\r\n        this.cleanErrorMessage(\"authorSurnameErrorMessage\");\r\n        let newAuthorName = document.getElementById(\"newAuthorNameField\").value;\r\n        let newAuthorSurname = document.getElementById(\"newAuthorSurnameField\").value;\r\n        \r\n        let errorMessage1 = this.validateAuthorName(newAuthorName);\r\n        let errorMessage2 = this.validateAuthorName(newAuthorSurname);\r\n\r\n        if (errorMessage1) {\r\n            this.createErrorField(\"authorNameErrorMessage\", errorMessage1, \"newAuthorInputGroup\");\r\n            errorsExist++;\r\n        }\r\n\r\n        if (errorMessage2) {\r\n            this.createErrorField(\"authorSurnameErrorMessage\", errorMessage, \"newAuthorInputGroup\");\r\n            errorsExist++;\r\n        }\r\n\r\n        return errorsExist;\r\n    } \r\n\r\n    render(){\r\n\r\n        const renderAuthorsList = this.state.authors.map(author => {\r\n            return(\r\n                <div className=\"row my-1\">\r\n                    <div className=\"col-1\"></div>\r\n                    <div className=\"col-3\">\r\n                        <input id={\"authorNameField\" + author.id} className=\"form-control\"  type=\"text\" defaultValue={author.name}/>\r\n                    </div>\r\n                    <div className=\"col-3\">\r\n                        <input id={\"authorSurnameField\" + author.id} className=\"form-control\"  type=\"text\" defaultValue={author.surname}/>\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        <button type=\"button\" className=\"btn btn-outline-primary btn-block mx-1\" onClick={() => this.saveChangedAuthor(author.id)}>{this.props.t(\"save\")}</button>\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        <button type=\"button\" className=\"btn btn-outline-danger btn-block mx-1\" onClick={() => this.deleteAuthor(author.id)}>{this.props.t(\"delete\")}</button>\r\n                    </div>\r\n                    <div className=\"col-1\"></div>\r\n                </div>\r\n            )\r\n        }); \r\n\r\n        return(\r\n\r\n            <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-1\"></div>\r\n                <div className=\"col-10\">\r\n                <div id=\"newAuthorInputGroup\" className=\"input-group mb-3 w-100 my-3\">\r\n                    <input id=\"newAuthorNameField\" type=\"text\" className=\"form-control\" placeholder={this.props.t(\"new_author_name\")} aria-describedby=\"button-addon2\" onFocus={() => this.cleanErrorMessage(\"authorNameErrorMessage\")}/>\r\n                    <input id=\"newAuthorSurnameField\" type=\"text\" className=\"form-control\" placeholder={this.props.t(\"new_author_surname\")} aria-describedby=\"button-addon2\" onFocus={() => this.cleanErrorMessage(\"authorSurnameErrorMessage\")}/>\r\n                    <div className=\"input-group-append\">\r\n                        <button className=\"btn btn-outline-success btn-sm\" type=\"button\" id=\"add-tags-button\" onClick={() => this.createAuthor()}>{this.props.t(\"add\")}</button>\r\n                    </div>\r\n                </div>\r\n\r\n                {renderAuthorsList}\r\n\r\n                </div>\r\n                <div className=\"col-1\"></div>\r\n            </div>\r\n            \r\n   \r\n            \r\n        </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default AuthorsList"]},"metadata":{},"sourceType":"module"}