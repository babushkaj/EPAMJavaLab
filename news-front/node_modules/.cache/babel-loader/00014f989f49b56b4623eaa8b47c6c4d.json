{"ast":null,"code":"var _jsxFileName = \"C:\\\\git\\\\laboratory\\\\news-front\\\\src\\\\component\\\\TagsList.jsx\";\nimport React from 'react';\nimport TagDataService from './TagDataService';\n\nclass TagsList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tags: [],\n      howMany: 10,\n      tagsAmount: 1,\n      pageNumber: 0\n    };\n  }\n\n  componentDidMount() {\n    this.refreshTags(this.state.pageNumber);\n  }\n\n  refreshTags(from) {\n    TagDataService.getAllTags(from, this.state.howMany).then(response => {\n      this.setState({\n        tags: response.data,\n        tagsAmount: response.headers['tags-amount'],\n        pageNumber: response.headers['page-number']\n      });\n    });\n  }\n\n  createTag() {\n    let errorsExist = this.tagErrorRender();\n\n    if (errorsExist != 0) {\n      return;\n    }\n\n    let newTagName = document.getElementById(\"newTagField\").value;\n    let newTag = {\n      id: null,\n      name: newTagName\n    };\n    TagDataService.createTag(newTag).then(response => {\n      document.getElementById(\"newTagField\").value = \"\";\n      this.refreshTags(this.state.pageNumber);\n    });\n  }\n\n  saveChangedTag(tagId) {\n    let tagName = document.getElementById(\"tagNameField\" + tagId).value;\n    let tag = {\n      id: tagId,\n      name: tagName\n    };\n    TagDataService.editTag(tag).then(response => {\n      this.refreshTags(this.state.pageNumber);\n    });\n  }\n\n  deleteTag(id) {\n    TagDataService.deleteTag(id).then(response => {\n      this.refreshTags(this.state.pageNumber);\n    });\n  }\n\n  cleanErrorMessage(errorFieldId) {\n    let previousErrorMessage = document.getElementById(errorFieldId);\n\n    if (previousErrorMessage) {\n      previousErrorMessage.remove();\n    }\n  }\n\n  validateNewsTagValue(value) {\n    let errorMessage = \"\";\n\n    if (!value) {\n      errorMessage = this.props.t(\"tag_name_mustnt_be_empty\");\n    } else if (value.length > 30) {\n      errorMessage = this.props.t(\"tag_name_mustnt_be_larger_than_30_characters\");\n    } else {\n      const allTags = this.state.tags;\n\n      for (let tag of allTags) {\n        if (tag.name === value) {\n          errorMessage = this.props.t(\"tag_already_exists\");\n          break;\n        }\n      }\n    }\n\n    return errorMessage;\n  }\n\n  createErrorField(fieldId, errorMessage, afterElementId) {\n    let small = document.createElement('small');\n    small.id = fieldId;\n    small.className = \"text-danger\";\n    small.innerText = errorMessage;\n    let fieldSet = document.getElementById(afterElementId);\n    fieldSet.after(small);\n  }\n\n  tagErrorRender() {\n    let errorsExist = 0;\n    this.cleanErrorMessage(\"tagNameErrorMessage\");\n    let newTag = document.getElementById(\"newTagField\").value;\n    let errorMessage = this.validateNewsTagValue(newTag);\n\n    if (errorMessage) {\n      this.createErrorField(\"tagNameErrorMessage\", errorMessage, \"newTagInputGroup\");\n      errorsExist++;\n    }\n\n    return errorsExist;\n  }\n\n  handleEditing(index, inputValue) {\n    const tagsArrToChage = this.state.tags.slice();\n    tagsArrToChage[index].name = inputValue;\n    this.setState({\n      tags: tagsArrToChage\n    });\n  }\n\n  render() {\n    const renderPagination = () => {\n      let pageButtons = [];\n\n      for (let i = 0; i < Math.ceil(this.state.tagsAmount / this.state.howMany); i++) {\n        if (i == this.state.pageNumber) {\n          pageButtons.push(React.createElement(\"li\", {\n            className: \"page-item\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129\n            },\n            __self: this\n          }, React.createElement(\"a\", {\n            className: \"page-link text-danger\",\n            href: \"#\",\n            onClick: () => {\n              this.refreshTags(i);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129\n            },\n            __self: this\n          }, i + 1)));\n        } else {\n          pageButtons.push(React.createElement(\"li\", {\n            className: \"page-item\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 131\n            },\n            __self: this\n          }, React.createElement(\"a\", {\n            className: \"page-link\",\n            href: \"#\",\n            onClick: () => {\n              this.refreshTags(i);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 131\n            },\n            __self: this\n          }, i + 1)));\n        }\n      }\n\n      return pageButtons;\n    };\n\n    const renderTagsList = this.state.tags.map((tag, index) => {\n      return React.createElement(\"div\", {\n        className: \"row my-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"col-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        id: \"tagNameField\" + tag.id,\n        className: \"form-control\",\n        type: \"text\",\n        value: tag.name,\n        onChange: e => this.handleEditing(index, e.target.value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-outline-primary btn-block mx-1\",\n        onClick: () => this.saveChangedTag(tag.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, this.props.t(\"save\"))), React.createElement(\"div\", {\n        className: \"col-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-outline-danger btn-block mx-1\",\n        onClick: () => this.deleteTag(tag.id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, this.props.t(\"delete\"))), React.createElement(\"div\", {\n        className: \"col-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }));\n    });\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"col-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"col-10\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"newTagInputGroup\",\n      className: \"input-group mb-3 w-100 my-3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      id: \"newTagField\",\n      type: \"text\",\n      className: \"form-control\",\n      placeholder: this.props.t(\"new_tag_name\"),\n      \"aria-describedby\": \"button-addon2\",\n      onFocus: () => this.cleanErrorMessage(\"tagNameErrorMessage\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"input-group-append\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"btn btn-outline-success btn-sm\",\n      type: \"button\",\n      id: \"add-tags-button\",\n      onClick: () => this.createTag(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, this.props.t(\"add\")))), renderTagsList, React.createElement(\"nav\", {\n      \"aria-label\": \"Pagination\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      className: \"pagination justify-content-center py-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      className: \"page-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, this.state.pageNumber == 0 ? null : React.createElement(\"a\", {\n      className: \"page-link\",\n      href: \"#\",\n      \"aria-label\": \"Previous\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      \"aria-hidden\": \"true\",\n      onClick: () => this.refreshTags(this.state.pageNumber - 1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"\\xAB\"))), renderPagination(), React.createElement(\"li\", {\n      className: \"page-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, this.state.pageNumber == Math.floor(this.state.tagsAmount / this.state.howMany) ? null : React.createElement(\"a\", {\n      className: \"page-link\",\n      href: \"#\",\n      \"aria-label\": \"Next\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      \"aria-hidden\": \"true\",\n      onClick: () => this.refreshTags(this.state.pageNumber + 1),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"\\xBB\")))))), React.createElement(\"div\", {\n      className: \"col-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default TagsList;","map":{"version":3,"sources":["C:/git/laboratory/news-front/src/component/TagsList.jsx"],"names":["React","TagDataService","TagsList","Component","constructor","props","state","tags","howMany","tagsAmount","pageNumber","componentDidMount","refreshTags","from","getAllTags","then","response","setState","data","headers","createTag","errorsExist","tagErrorRender","newTagName","document","getElementById","value","newTag","id","name","saveChangedTag","tagId","tagName","tag","editTag","deleteTag","cleanErrorMessage","errorFieldId","previousErrorMessage","remove","validateNewsTagValue","errorMessage","t","length","allTags","createErrorField","fieldId","afterElementId","small","createElement","className","innerText","fieldSet","after","handleEditing","index","inputValue","tagsArrToChage","slice","render","renderPagination","pageButtons","i","Math","ceil","push","renderTagsList","map","e","target","floor"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\nimport TagDataService from './TagDataService'\r\n\r\nclass TagsList extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            tags:[],\r\n            howMany: 10,\r\n            tagsAmount: 1,\r\n            pageNumber: 0,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshTags(this.state.pageNumber);\r\n    }\r\n\r\n    refreshTags(from){\r\n        TagDataService.getAllTags(from, this.state.howMany)\r\n        .then(\r\n            (response) => {\r\n                this.setState({tags: response.data, tagsAmount: response.headers['tags-amount'], pageNumber: response.headers['page-number']});                     \r\n            }\r\n        )\r\n    }\r\n\r\n    createTag(){\r\n        let errorsExist = this.tagErrorRender();\r\n        if(errorsExist != 0){\r\n            return;\r\n        }\r\n\r\n        let newTagName = document.getElementById(\"newTagField\").value;\r\n        let newTag ={id: null, name: newTagName}; \r\n        TagDataService.createTag(newTag)\r\n        .then(\r\n            response => {\r\n                document.getElementById(\"newTagField\").value = \"\";\r\n                this.refreshTags(this.state.pageNumber);\r\n            }\r\n        )\r\n    }\r\n\r\n    saveChangedTag(tagId){\r\n        let tagName = document.getElementById(\"tagNameField\" + tagId).value;\r\n        let tag = {id: tagId, name: tagName};\r\n        TagDataService.editTag(tag)\r\n        .then(\r\n            response => {\r\n                this.refreshTags(this.state.pageNumber);\r\n            }\r\n        )\r\n    }\r\n\r\n    deleteTag(id){\r\n        TagDataService.deleteTag(id)\r\n        .then(\r\n            response => {\r\n                this.refreshTags(this.state.pageNumber);\r\n            }\r\n        )\r\n    }\r\n\r\n    cleanErrorMessage(errorFieldId){\r\n        let previousErrorMessage = document.getElementById(errorFieldId);\r\n        if (previousErrorMessage) {\r\n            previousErrorMessage.remove();\r\n        }\r\n    }\r\n\r\n    validateNewsTagValue(value) {\r\n        let errorMessage = \"\";\r\n        if (!value) {\r\n            errorMessage = this.props.t(\"tag_name_mustnt_be_empty\");\r\n        } else if (value.length > 30) {\r\n            errorMessage = this.props.t(\"tag_name_mustnt_be_larger_than_30_characters\");\r\n        } else {\r\n            const allTags = this.state.tags;\r\n            for (let tag of allTags) {\r\n                if (tag.name === value) {\r\n                    errorMessage = this.props.t(\"tag_already_exists\");\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return errorMessage;\r\n    }\r\n\r\n    createErrorField(fieldId, errorMessage, afterElementId) {\r\n        let small = document.createElement('small');\r\n        small.id = fieldId;\r\n        small.className = \"text-danger\";\r\n        small.innerText = errorMessage;\r\n        let fieldSet = document.getElementById(afterElementId);\r\n        fieldSet.after(small);\r\n    }\r\n\r\n    tagErrorRender(){\r\n        let errorsExist = 0;\r\n\r\n        this.cleanErrorMessage(\"tagNameErrorMessage\");\r\n        let newTag = document.getElementById(\"newTagField\").value;\r\n        let errorMessage = this.validateNewsTagValue(newTag);\r\n\r\n        if(errorMessage){\r\n            this.createErrorField(\"tagNameErrorMessage\", errorMessage, \"newTagInputGroup\");\r\n            errorsExist++;\r\n        }\r\n\r\n        return errorsExist;\r\n    } \r\n\r\n    handleEditing(index, inputValue){\r\n        const tagsArrToChage = this.state.tags.slice();\r\n        tagsArrToChage[index].name = inputValue;\r\n        this.setState({tags: tagsArrToChage});\r\n    }\r\n\r\n    render(){\r\n\r\n        const renderPagination = () => {\r\n            let pageButtons = [];\r\n\r\n            for (let i = 0; i < Math.ceil(this.state.tagsAmount/this.state.howMany); i++) {\r\n                if(i == this.state.pageNumber){\r\n                    pageButtons.push(<li className=\"page-item\"><a className=\"page-link text-danger\" href=\"#\" onClick={() => {this.refreshTags(i)}}>{i+1}</a></li>);  \r\n                } else {\r\n                    pageButtons.push(<li className=\"page-item\"><a className=\"page-link\" href=\"#\" onClick={() => {this.refreshTags(i)}}>{i+1}</a></li>);  \r\n                }\r\n                      \r\n            }\r\n            return pageButtons;\r\n        };\r\n\r\n        const renderTagsList = this.state.tags.map((tag, index) => {\r\n            return(\r\n                <div className=\"row my-1\">\r\n                    <div className=\"col-1\"></div>\r\n                    <div className=\"col-6\">\r\n                        <input id={\"tagNameField\" + tag.id} className=\"form-control\"  type=\"text\" value={tag.name} onChange={(e) => this.handleEditing(index, e.target.value)}/>\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        <button type=\"button\" className=\"btn btn-outline-primary btn-block mx-1\" onClick={() => this.saveChangedTag(tag.id)}>{this.props.t(\"save\")}</button>\r\n                    </div>\r\n                    <div className=\"col-2\">\r\n                        <button type=\"button\" className=\"btn btn-outline-danger btn-block mx-1\" onClick={() => this.deleteTag(tag.id)}>{this.props.t(\"delete\")}</button>\r\n                    </div>\r\n                    <div className=\"col-1\"></div>\r\n                </div>\r\n            )\r\n        })  \r\n\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-1\"></div>\r\n                    <div className=\"col-10\">\r\n                        <div id=\"newTagInputGroup\" className=\"input-group mb-3 w-100 my-3\">\r\n                            <input id=\"newTagField\" type=\"text\" className=\"form-control\" placeholder={this.props.t(\"new_tag_name\")} aria-describedby=\"button-addon2\" onFocus={() => this.cleanErrorMessage(\"tagNameErrorMessage\")}/>\r\n                            <div className=\"input-group-append\">\r\n                                <button className=\"btn btn-outline-success btn-sm\" type=\"button\" id=\"add-tags-button\" onClick={() => this.createTag()}>{this.props.t(\"add\")}</button>\r\n                            </div>\r\n                        </div>\r\n    \r\n                        {renderTagsList}\r\n\r\n                        <nav aria-label=\"Pagination\">\r\n                            <ul className=\"pagination justify-content-center py-4\">\r\n                                <li className=\"page-item\">\r\n                                    {this.state.pageNumber == 0 ?\r\n                                        null\r\n                                    :\r\n                                        <a className=\"page-link\" href=\"#\" aria-label=\"Previous\">\r\n                                        <span aria-hidden=\"true\" onClick = {() => this.refreshTags(this.state.pageNumber - 1)}>&laquo;</span>        \r\n                                        </a>\r\n                                    }\r\n                                </li>\r\n\r\n                                {renderPagination()}\r\n\r\n                                <li className=\"page-item\">\r\n\r\n                                    {this.state.pageNumber == Math.floor(this.state.tagsAmount/this.state.howMany) ?\r\n                                        null\r\n                                    :\r\n                                        <a className=\"page-link\" href=\"#\" aria-label=\"Next\">\r\n                                            <span aria-hidden=\"true\" onClick = {() => this.refreshTags(this.state.pageNumber + 1)}>&raquo;</span>\r\n                                        </a>\r\n                                    }\r\n\r\n                                </li>\r\n                            </ul>\r\n                        </nav>\r\n\r\n                    </div>\r\n                    <div className=\"col-1\"></div>\r\n                </div>\r\n     \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TagsList\r\n"]},"metadata":{},"sourceType":"module"}